// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: shared/v1/pockets.proto

package sharedv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/matfire/pockets/shared/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PocketsServiceName is the fully-qualified name of the PocketsService service.
	PocketsServiceName = "shared.v1.PocketsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PocketsServiceGetContainersProcedure is the fully-qualified name of the PocketsService's
	// GetContainers RPC.
	PocketsServiceGetContainersProcedure = "/shared.v1.PocketsService/GetContainers"
)

// PocketsServiceClient is a client for the shared.v1.PocketsService service.
type PocketsServiceClient interface {
	GetContainers(context.Context, *connect.Request[v1.GetContainersRequest]) (*connect.Response[v1.GetContainersResponse], error)
}

// NewPocketsServiceClient constructs a client for the shared.v1.PocketsService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPocketsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PocketsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	pocketsServiceMethods := v1.File_shared_v1_pockets_proto.Services().ByName("PocketsService").Methods()
	return &pocketsServiceClient{
		getContainers: connect.NewClient[v1.GetContainersRequest, v1.GetContainersResponse](
			httpClient,
			baseURL+PocketsServiceGetContainersProcedure,
			connect.WithSchema(pocketsServiceMethods.ByName("GetContainers")),
			connect.WithClientOptions(opts...),
		),
	}
}

// pocketsServiceClient implements PocketsServiceClient.
type pocketsServiceClient struct {
	getContainers *connect.Client[v1.GetContainersRequest, v1.GetContainersResponse]
}

// GetContainers calls shared.v1.PocketsService.GetContainers.
func (c *pocketsServiceClient) GetContainers(ctx context.Context, req *connect.Request[v1.GetContainersRequest]) (*connect.Response[v1.GetContainersResponse], error) {
	return c.getContainers.CallUnary(ctx, req)
}

// PocketsServiceHandler is an implementation of the shared.v1.PocketsService service.
type PocketsServiceHandler interface {
	GetContainers(context.Context, *connect.Request[v1.GetContainersRequest]) (*connect.Response[v1.GetContainersResponse], error)
}

// NewPocketsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPocketsServiceHandler(svc PocketsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	pocketsServiceMethods := v1.File_shared_v1_pockets_proto.Services().ByName("PocketsService").Methods()
	pocketsServiceGetContainersHandler := connect.NewUnaryHandler(
		PocketsServiceGetContainersProcedure,
		svc.GetContainers,
		connect.WithSchema(pocketsServiceMethods.ByName("GetContainers")),
		connect.WithHandlerOptions(opts...),
	)
	return "/shared.v1.PocketsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PocketsServiceGetContainersProcedure:
			pocketsServiceGetContainersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPocketsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPocketsServiceHandler struct{}

func (UnimplementedPocketsServiceHandler) GetContainers(context.Context, *connect.Request[v1.GetContainersRequest]) (*connect.Response[v1.GetContainersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("shared.v1.PocketsService.GetContainers is not implemented"))
}
